name: Node.js CI/CD with Coverage (No Login)

on:
  push:
    branches:
      - staging
      - main
  pull_request:
    branches:
      - staging
      - main

jobs:
  # 1Ô∏è‚É£ Build, test, and enforce coverage threshold
  build-test-coverage:
    name: Build & Test with Coverage Threshold
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage (‚â•80%)
        run: |
          echo "Running tests with coverage threshold >= 80%"
          npx jest --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
        env:
          CI: true

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Build project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            dist
            build
            .

  # 2Ô∏è‚É£ Deploy to staging (simulated)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build-artifacts

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Deploy to Staging (Simulated)
        run: |
          echo "üöÄ Deploying to STAGING environment..."
          echo "Build files in: $(pwd)/build-artifacts"
          echo "Coverage report in: $(pwd)/coverage"
          echo "‚úÖ Staging deployment complete!"

  # 3Ô∏è‚É£ Deploy to production (manual approval, simulated)
  deploy-production:
    name: Deploy to Production (Requires Approval)
    runs-on: ubuntu-latest
    needs: build-test-coverage
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build-artifacts

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage

      - name: Deploy to Production (Simulated)
        run: |
          echo "üöÄ Deploying to PRODUCTION environment..."
          echo "Build files in: $(pwd)/build-artifacts"
          echo "Coverage report in: $(pwd)/coverage"
          echo "‚è∏ Waiting for manual approval (GitHub environment)"
          echo "‚úÖ Production deployment complete!"
